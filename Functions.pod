=head1 NAME
X<function>

perlfunc - Perl builtin functions

=head1 DESCRIPTION

A (hopefully) comprehensive list of Perl 5 builtin functions with their
Perl 6 equivalents with notes on variations between them where
necessary.

=head1 NOTE

I will I<not> be explaining the functions in detail. This document is an
attempt to guide you from the functions in Perl 5's perlvar document to
their equivalents in Perl 6. For full documentation on the Perl 6
equivalents, please see the Perl 6 documentation.

One general comment: Perl 6 takes its objects a lot more seriously than Perl
5. A I<lot> of things are objects. This means a lot of things that used to be
function calls of the form C<function(@args)> are now method calls of the form
C<@args.function>. This should be obvious in the following text, but it
probably behooves you to get into that frame of mind now.

Also, unless otherwise stated, the use of the term "function" here will mean a
function in the style of C<func(@args)>, while "method" will refer to a
function in the style of C<@args.func>.

=head1 SOURCES

I'm taking my information from L<http://doc.perl6.org>, supplemented by the
design documents at L<http://design.perl6.org/> and input from the denizens
of #perl6 on irc.freenode.org

=head2 Alphabetical Listing of Perl Functions

=item -X FILEHANDLE
X<-r>X<-w>X<-x>X<-o>X<-R>X<-W>X<-X>X<-O>X<-e>X<-z>X<-s>X<-f>X<-d>X<-l>X<-p>
X<-S>X<-b>X<-c>X<-t>X<-u>X<-g>X<-k>X<-T>X<-B>X<-M>X<-A>X<-C>

=item -X EXPR

=item -X DIRHANDLE

=item -X

Perl 6 gives you a couple of options when it comes to file tests. You can do a
smart match (C<~~>) or you can call a method.

In Perl 6, you don't need to actually open a filehandle in the
traditional way (although you can) to do a filetest. You can simply append
C<.IO> to the filename. For instance, here is how to check if a file is
readable using smart match:

C<'/path/to/file'.IO ~~ :r>

You can, of course, use an already opened filehandle. Here, using the file
handle C<$fh>, an example, using the method syntax for the file test:

C<$fh.r>

Most of the former filetests have colon equivalents for use with smart match:

:e Exists
:d Directory
:f File
:l Symbolic link
:r Readable
:w Writable
:x Executable
:s Size
:z Zero size

All of these tests have method equivalents.

Three tests, however, I<only> have method equivalents:

C<-M $fh> => C<$fh.modified>
C<-A $fh> => C<$fh.accessed>
C<-C $fh> => C<$fh.changed>

The remaining filetests in Perl 5 do not appear to have been implemented in
Perl 6.

The documentation for this can be found at
L<http://doc.perl6.org/type/IO::FileTestable#File_Test_operators>.

More information on reading and writing files can be found at
L<http://doc.perl6.org/language/io>. Also, the section on C<open()> below may be
helpful.

=item abs VALUE
X<abs> X<absolute>

Still works as a function (C<abs($x)>), but also as a method. One gotcha,
however - method calls bind more tightly than C<->, so, for example,
C<-15.abs> evaluates as C<-(15.abs)> giving you C<-15>. In this example, you
would have to do something like C<(-15).abs>.

C<abs> also still operates on C<$_> in the absence of a value, but not as a
function, and as a method you need to call it as C<.abs> rather than simply
C<abs>.

=item accept NEWSOCKET,GENERICSOCKET
X<accept>

C<accept> is now a method you can call on a server, e. g. C<$server.accept()>.
Instead of returning a packed address, it returns a socket, most likely an
IO::Socket object of some sort.

=item alarm SECONDS
X<alarm>
X<SIGALRM>
X<timer>

[NEEDS FURTHER RESEARCH] C<alarm()> is no more. It has been
suggested that a replacement may be somewhere in the new Concurrency
features, such as C<Promise.in>, but some digging may be needed to
find a true analog.

=item atan2 Y,X
X<atan2> X<arctangent> X<tan> X<tangent>

Still available as a function as well as now being able to be used as a
method. For instance, these are equivalent:

C<atan2(100)>
C<100.atan2>

=item bind SOCKET,NAME
X<bind>

[NEEDS FURTHER RESEARCH] No sign of a socket-related C<bind()> in Perl 6. At a
guess, whatever socket binding is needed happens when you create a new socket
object.

=item binmode FILEHANDLE

Instead of this, you would now use C<:bin> as the file mode when opening the
socket. E. g. C<my $fh = open("path/to/file", :bin);>

=item bless REF,CLASSNAME
X<bless>

With the changes in class creation in Perl 6, this may find less use, and is
now a method. The Perl 6 docs say "Creates a new object of the same type as
the invocant, uses the named arguments to initialize attributes, and returns
the created object." If you're porting a module from Perl 5 to Perl 6, it's
quite possible you'll want to use C<new> for creating objects rather than
C<bless>, although there may be some situations in which the latter may still
be useful.

=item break

Not in Perl 6. For breaking out of C<given> blocks, you should probably take a
look at C<proceed> and C<succeed>
(L<http://doc.perl6.org/language/control#proceed_and_succeed>).

=item caller EXPR
X<caller> X<call stack> X<stack> X<stack trace>

[NEEDS FURTHER RESEARCH] What C<caller> used to do has been taken on by
C<callframe>. However, a simple call to C<callframe> will be of little
use, as it will return a CallFrame object, rather than any useful
information. The filename and line number previously returned as the
second and third values from C<caller>, are in C<callframe.annotations>.
You would get them by using C<< callframe().annotations.<file line> >>
or, individually with C<< callframe().annotations.<file> >> or C<<
callframe().annotations.<line> >>. There does not seem to be a simple way of
getting the package name out of C<callframe> though.

=item chdir EXPR
X<chdir>
X<cd>
X<directory, change>

Still seems to work as it used to.

mod LIST
X<chmod> X<permission> X<mode>

Still can function as under Perl 5, with the change that octal numbers are now
represented differently (C<0o755> rather than C<0755>). You may also use it as
a method, e. g. C<$fh.chmod(0o755)>.

=item chomp VARIABLE
X<chomp> X<INPUT_RECORD_SEPARATOR> X<$/> X<newline> X<eol>

The behavior of C<chomp> has changed. It now leaves the target unaffected and
I<returns> the target with a final logical newline removed. I. e. C<$x =
"howdy\n";$y = chomp($x);> results in C<$x> containing "howdy\n" and C<$y>
containing "howdy". Can also now be used as a method, i. e. C<$y = $x.chomp>.

=item chop VARIABLE
X<chop>

As with C<chomp>, now returns the chopped string, rather than chopping in
place. I. e. C<$x = "howdy";$y = chop($x);> results in C<$x> being "howdy" and
C<$y> being "howd". Can also be used as a method: C<$y = $x.chop>

=item chown LIST
X<chown> X<owner> X<user> X<group>

C<chown> is no longer in Perl 6.

=item chr NUMBER
X<chr> X<character> X<ASCII> X<Unicode>

Similar to the Perl 5 version, coerces the target to an integer, and uses that
as a Unicode code point to return the relevant character. Can be used as a
function and a method:

C<chr(65); # "A">
C<65.chr;  # "A">


